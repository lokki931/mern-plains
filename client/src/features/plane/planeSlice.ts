import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';

import { IPlane } from './../../app/types';
import { createPlane, getPlane } from './planeAPI';

export interface planeState {
  plane?: IPlane;
  isLoding: boolean;
}

const initialState: planeState = {
  plane: undefined,
  isLoding: false,
};

export const createAsync = createAsyncThunk('plane/createPlane', async (data: FormData) => {
  try {
    return await createPlane(data);
  } catch (error) {
    console.log(error);
  }
});
export const getAsync = createAsyncThunk('plane/getPlane', async (id: string) => {
  try {
    return await getPlane(id);
  } catch (error) {
    console.log(error);
  }
});
export const planeSlice = createSlice({
  name: 'plane',
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {},
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(getAsync.pending, (state) => {
        state.isLoding = true;
      })
      .addCase(getAsync.fulfilled, (state, action) => {
        state.isLoding = false;
        state.plane = action.payload[0];
      })
      .addCase(getAsync.rejected, (state) => {
        state.isLoding = true;
      })
      .addCase(createAsync.pending, (state) => {
        state.isLoding = true;
      })
      .addCase(createAsync.fulfilled, (state) => {
        state.isLoding = false;
      })
      .addCase(createAsync.rejected, (state) => {
        state.isLoding = true;
      });
  },
});

export default planeSlice.reducer;
