import { createAsyncThunk, createSlice, PayloadAction } from '@reduxjs/toolkit';

import { IPlane } from './../../app/types';
import { createPlane, getPlane } from './planeAPI';

export interface planeState {
  plane: IPlane | null;
  isLoding: boolean;
  errors: {
    name?: { message?: string };
    capacity?: { message?: string };
    description?: { message?: string };
    planeImage?: { message?: string };
    price?: { message?: string };
  } | null;
}
const initialState: planeState = {
  plane: null,
  isLoding: false,
  errors: null,
};

export const createAsync = createAsyncThunk(
  'plane/createPlane',
  async (data: FormData, { rejectWithValue }) => {
    try {
      return await createPlane(data);
    } catch (error: any) {
      return rejectWithValue(error.response?.data);
    }
  },
);
export const getAsync = createAsyncThunk('plane/getPlane', async (id: string) => {
  try {
    return await getPlane(id);
  } catch (error: any) {
    console.log(error);
  }
});
export const planeSlice = createSlice({
  name: 'plane',
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    resetErrors: (state) => {
      state.errors = null;
    },
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(getAsync.pending, (state) => {
        state.isLoding = true;
      })
      .addCase(getAsync.fulfilled, (state, action) => {
        state.isLoding = false;
        if (action.payload) state.plane = action.payload[0];
      })
      .addCase(getAsync.rejected, (state) => {
        state.isLoding = true;
      })
      .addCase(createAsync.pending, (state) => {
        state.errors = null;
      })
      .addCase(createAsync.fulfilled, (state) => {
        state.errors = null;
      })
      .addCase(createAsync.rejected, (state, { payload }) => {
        if (payload) state.errors = payload;
      });
  },
});

export const { resetErrors } = planeSlice.actions;

export default planeSlice.reducer;
